{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPTqzc4YuoXDQQeDpgX0TWj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/solvenite/Text-Generation-with-markov-chains/blob/main/Task%202.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "rRLkowEqiEzU"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "RW4SnyzYsFvd"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "\n",
        "def build_markov_chain(text, n=2):\n",
        "    words = text.split()\n",
        "    markov_chain = {}\n",
        "\n",
        "    for i in range(len(words) - n):\n",
        "        key = tuple(words[i:i+n])  # Store n-gram tuple as key\n",
        "        next_word = words[i + n]   # Word following the key\n",
        "        if key not in markov_chain:\n",
        "            markov_chain[key] = []\n",
        "        markov_chain[key].append(next_word)\n",
        "\n",
        "    return markov_chain\n",
        "\n",
        "def generate_text(chain, seed, length=20):\n",
        "    if seed not in chain:\n",
        "        seed = random.choice(list(chain.keys()))  # Pick a random start\n",
        "\n",
        "    output = list(seed)\n",
        "\n",
        "    for _ in range(length):\n",
        "        current_tuple = tuple(output[-len(seed):])\n",
        "        if current_tuple in chain:\n",
        "            next_word = random.choice(chain[current_tuple])\n",
        "            output.append(next_word)\n",
        "        else:\n",
        "            break\n",
        "\n",
        "    return ' '.join(output)\n",
        "\n",
        "# Define text corpus\n",
        "text_corpus = \"\"\"The quick brown fox jumps over the lazy dog. The quick brown fox is fast and clever.\"\"\"\n",
        "markov_chain = build_markov_chain(text_corpus, n=2)\n",
        "\n",
        "# Seed for text generation\n",
        "seed = ('The', 'quick')\n",
        "generated_text = generate_text(markov_chain, seed, length=10)\n",
        "\n",
        "# Print output\n",
        "print(generated_text)"
      ]
    }
  ]
}